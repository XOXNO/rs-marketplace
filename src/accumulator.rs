// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct AccumulatorProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for AccumulatorProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = AccumulatorProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        AccumulatorProxyMethods { wrapped_tx: tx }
    }
}

pub struct AccumulatorProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> AccumulatorProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg4: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg5: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        xoxno_liquid_sc: Arg0,
        burn_rate: Arg1,
        share_rate: Arg2,
        reward_token: Arg3,
        liquid_reward_token: Arg4,
        ash_sc: Arg5,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&xoxno_liquid_sc)
            .argument(&burn_rate)
            .argument(&share_rate)
            .argument(&reward_token)
            .argument(&liquid_reward_token)
            .argument(&ash_sc)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AccumulatorProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg4: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg5: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        xoxno_liquid_sc: Arg0,
        burn_rate: Arg1,
        share_rate: Arg2,
        reward_token: Arg3,
        liquid_reward_token: Arg4,
        ash_sc: Arg5,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .argument(&xoxno_liquid_sc)
            .argument(&burn_rate)
            .argument(&share_rate)
            .argument(&reward_token)
            .argument(&liquid_reward_token)
            .argument(&ash_sc)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AccumulatorProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn deposit(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("deposit")
            .original_result()
    }

    pub fn deposit_royalties<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        creator: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("depositRoyalties")
            .argument(&creator)
            .original_result()
    }

    pub fn distribute<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<ManagedVec<Env::Api, AggregatorStep<Env::Api>>>,
        Arg3: ProxyArg<ManagedVec<Env::Api, TokenAmount<Env::Api>>>,
    >(
        self,
        token: Arg0,
        gas: Arg1,
        steps: Arg2,
        limits: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("distribute")
            .argument(&token)
            .argument(&gas)
            .argument(&steps)
            .argument(&limits)
            .original_result()
    }

    pub fn distribute_royalties<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<ManagedVec<Env::Api, AggregatorStep<Env::Api>>>,
        Arg4: ProxyArg<ManagedVec<Env::Api, TokenAmount<Env::Api>>>,
    >(
        self,
        token: Arg0,
        creator: Arg1,
        gas: Arg2,
        steps: Arg3,
        limits: Arg4,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("distributeRoyalties")
            .argument(&token)
            .argument(&creator)
            .argument(&gas)
            .argument(&steps)
            .argument(&limits)
            .original_result()
    }

    pub fn claim_protocol_reserves(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimProtocolReserves")
            .original_result()
    }

    pub fn reserve(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getProtocolReserve")
            .original_result()
    }

    pub fn reward_token(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getRewardToken")
            .original_result()
    }

    pub fn liquid_reward_token(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLiquidRewardToken")
            .original_result()
    }

    pub fn burn_rate(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getBurnRate")
            .original_result()
    }

    pub fn share_rate(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getShareRate")
            .original_result()
    }

    pub fn tokens(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, EgldOrEsdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAccumulatedTokens")
            .original_result()
    }

    pub fn token_balance<
        Arg0: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
    >(
        self,
        token: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAccumulatedTokenBalance")
            .argument(&token)
            .original_result()
    }

    pub fn creators(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCreators")
            .original_result()
    }

    pub fn creator_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        creator: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, EgldOrEsdtTokenIdentifier<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCreatorTokens")
            .argument(&creator)
            .original_result()
    }

    pub fn creator_royalties<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<EgldOrEsdtTokenIdentifier<Env::Api>>,
    >(
        self,
        creator: Arg0,
        token: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCreatorRoyalties")
            .argument(&creator)
            .argument(&token)
            .original_result()
    }

    pub fn xoxno_liquid_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLiquidSC")
            .original_result()
    }

    pub fn ash_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAggregatorSC")
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, PartialEq, Clone, ManagedVecItem)]
pub struct AggregatorStep<Api>
where
    Api: ManagedTypeApi,
{
    pub token_in: TokenIdentifier<Api>,
    pub token_out: TokenIdentifier<Api>,
    pub amount_in: BigUint<Api>,
    pub pool_address: ManagedAddress<Api>,
    pub function_name: ManagedBuffer<Api>,
    pub arguments: ManagedVec<Api, ManagedBuffer<Api>>,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, PartialEq, Clone, ManagedVecItem)]
pub struct TokenAmount<Api>
where
    Api: ManagedTypeApi,
{
    pub token: TokenIdentifier<Api>,
    pub amount: BigUint<Api>,
}
